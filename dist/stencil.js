!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react"),require("prop-types")):"function"==typeof define&&define.amd?define(["react","prop-types"],t):"object"==typeof exports?exports.stencil=t(require("react"),require("prop-types")):e.stencil=t(e.react,e["prop-types"])}(this,function(e,t){return function(e){function t(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,t),a.l=!0,a.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=19)}([function(t,n){t.exports=e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return"string"!=typeof e?null:"stncl"+e};t.default=r},function(e,n){e.exports=t},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),u=r(a),o=n(2),c=r(o),l=n(1),i=r(l),f=function(e){var t=e.anchorId;return u.default.createElement("div",null,u.default.createElement("div",{id:t,className:""+(0,i.default)("__anchor-scroll-point")}),u.default.createElement("a",{href:"#"+t,className:""+(0,i.default)("__anchor-link")},u.default.createElement("svg",{"aria-hidden":"true",width:"16",height:"16",viewBox:"0 0 16 16"},u.default.createElement("path",{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))))};f.propTypes={anchorId:c.default.string.isRequired},t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/\s+/g,"-").toLowerCase()};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){var n=void 0;return t&&(n=t.toUpperCase()),e.sort(function(e,r){var a=e.toUpperCase(),u=r.toUpperCase();return t&&a===n?-1:a<u?-1:a>u?1:0})};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){return"func"===t?"":"number"===t?Number(e):"bool"===t?JSON.parse(e||!1):e};t.default=r},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),u=r(a),o=n(2),c=r(o),l=n(12),i=r(l),f=n(9),s=r(f),d=n(16),p=r(d),_=n(13),h=r(_),v=n(10),y=r(v),b=n(15),m=r(b),g=n(1),j=r(g),O=function(e){var t=e.name,n=e.description,r=e.status,a=e.notes,o=e.props,c=e.examples,l=e.setExample,f=e.setProp,d=e.componentProps,_=e.swatches,v=e.children;return u.default.createElement("section",{className:(0,j.default)("__layout")},u.default.createElement("header",{className:(0,j.default)("__component-header")},u.default.createElement("h1",{className:(0,j.default)("__heading")},t),u.default.createElement(p.default,{status:r})),u.default.createElement(s.default,null,n),u.default.createElement("section",{className:(0,j.default)("__body")},u.default.createElement(h.default,{swatches:_},v),u.default.createElement(y.default,{setExample:l,examples:c}),u.default.createElement(m.default,{state:d,props:o,setProp:f}),u.default.createElement(i.default,{notes:a})))};O.propTypes={children:c.default.element.isRequired,setExample:c.default.func.isRequired,setProp:c.default.func.isRequired,componentProps:c.default.object.isRequired,props:c.default.object,swatches:c.default.arrayOf(c.default.string),name:c.default.string,description:c.default.node,notes:c.default.object,examples:c.default.object,status:c.default.oneOf(["DANGEROUS","WIP","READY"])},t.default=O},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(20),a=function(e){return e&&e.__esModule?e:{default:e}}(r),u=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.props,n=e.swatches,r=arguments[1];return(0,a.default)({},{props:t,swatches:n},r)};t.default=u},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),u=r(a),o=n(2),c=r(o),l=n(1),i=r(l),f=function(e){var t=e.children;return!!t&&u.default.createElement("section",{className:(0,i.default)("__section")+" "+(0,i.default)("__section--slim")+" "+(0,i.default)("__component-description")},t)||null};f.propTypes={children:c.default.node},t.default=f},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),i=r(l),f=n(2),s=r(f),d=n(1),p=r(d),_=n(5),h=r(_),v=n(3),y=r(v),b=function(e){function t(e){a(this,t);var n=u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={current:"Default"},n.onChange=n.onChange.bind(n),n}return o(t,e),c(t,[{key:"onChange",value:function(e){var t=e.target.value;this.props.setExample(t),this.setState({current:t})}},{key:"render",value:function(){var e=this.props.examples;return!!e&&i.default.createElement("section",{className:(0,p.default)("__section")+" "+(0,p.default)("__section--slim")},i.default.createElement("h2",{className:(0,p.default)("__heading")},i.default.createElement(y.default,{anchorId:"examples"}),"Examples"),i.default.createElement("div",{className:(0,p.default)("__dropdown")},i.default.createElement("select",{className:(0,p.default)("__dropdown__select"),onChange:this.onChange,value:this.state.current},(0,h.default)(Object.keys(e),"Default").map(function(e){return i.default.createElement("option",{key:e},e)})),i.default.createElement("div",{className:(0,p.default)("__dropdown__arrow")})))||null}}]),t}(l.Component);b.propTypes={setExample:s.default.func.isRequired,examples:s.default.object},t.default=b},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.handleInputOnChange=void 0;var a=n(0),u=r(a),o=n(2),c=r(o),l=n(1),i=r(l),f=n(6),s=r(f),d=function(e,t,n){return function(r){var a=r.target;return e(t,(0,s.default)("bool"===n?a.checked:a.value),n)}},p=function(e){var t=e.name,n=e.type,r=e.onChange,a=e.value,o=d(r,t,n),c=void 0;return"string"===n&&(c=u.default.createElement("input",{type:"text",value:a,className:(0,i.default)("__input"),onChange:o,placeholder:"Change '"+t+"' prop value..."})),"number"===n&&(c=u.default.createElement("input",{type:"number",value:a,className:(0,i.default)("__input"),onChange:o})),"bool"===n&&(c=u.default.createElement("label",{className:(0,i.default)("__checkbox-label")},u.default.createElement("input",{type:"checkbox",checked:a,className:(0,i.default)("__checkbox"),onChange:o}),a?"'"+t+"' is true":"'"+t+"' is false")),c||null};p.propTypes={name:c.default.string.isRequired,type:c.default.oneOf(["string","number","bool"]).isRequired,onChange:c.default.func.isRequired,value:c.default.oneOfType([c.default.string,c.default.number,c.default.bool])},t.handleInputOnChange=d,t.default=p},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),u=r(a),o=n(2),c=r(o),l=n(1),i=r(l),f=n(4),s=r(f),d=n(3),p=r(d),_=function(e){var t=e.notes;return!!t&&u.default.createElement("section",{className:(0,i.default)("__section")+" "+(0,i.default)("__section--slim")},u.default.createElement("h2",{className:(0,i.default)("__heading")},u.default.createElement(p.default,{anchorId:"notes"}),"Notes"),Object.keys(t).map(function(e){return u.default.createElement("div",{key:e,className:(0,i.default)("__note")},u.default.createElement("h3",{className:(0,i.default)("__heading")},u.default.createElement(p.default,{anchorId:"notes-"+(0,s.default)(e)}),e),u.default.createElement("p",{className:(0,i.default)("__p")},t[e]))}))||null};_.propTypes={notes:c.default.object},t.default=_},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),i=r(l),f=n(2),s=r(f),d=n(1),p=r(d),_=n(3),h=r(_),v=n(17),y=r(v),b=function(e){function t(e){a(this,t);var n=u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={current:null},n.setSwatch=n.setSwatch.bind(n),n}return o(t,e),c(t,[{key:"setSwatch",value:function(e){this.setState({current:e})}},{key:"render",value:function(){var e=this,t=this.state.current,n=this.props,r=n.swatches,a=n.children,u=void 0;return r&&r.length>0&&(u=i.default.createElement("div",{className:(0,p.default)("__swatch-list")},i.default.createElement(y.default,{swatch:null,isActive:null===t,onClick:this.setSwatch}),r.map(function(n){return i.default.createElement(y.default,{key:n,swatch:n,isActive:t===n,onClick:e.setSwatch})}))),i.default.createElement("section",{className:(0,p.default)("__section")},i.default.createElement("h2",{className:(0,p.default)("__heading")},i.default.createElement(h.default,{anchorId:"preview"}),"Preview"),u,i.default.createElement("div",{style:{background:t},className:(0,p.default)("__preview")},a))}}]),t}(l.Component);t.default=b,b.propTypes={children:s.default.element.isRequired,swatches:s.default.arrayOf(s.default.string)}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}Object.defineProperty(t,"__esModule",{value:!0});var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(0),c=r(o),l=n(2),i=r(l),f=n(1),s=r(f),d=n(4),p=r(d),_=n(11),h=r(_),v=n(3),y=r(v),b=function(e){var t=e.name,n=e.defs,r=void 0===n?{}:n,o=a(e,["name","defs"]),l=r.type,i=r.required,f=r.description,d=void 0;d=l?c.default.createElement("span",{className:(0,s.default)("__prop-type")},"(",l,")"):c.default.createElement("span",{className:(0,s.default)("__prop-type-missing")},"Missing type");var _=void 0;i&&(_=c.default.createElement("span",{className:(0,s.default)("__prop-required")},"Required"));var v=void 0;f&&(v=c.default.createElement("p",{className:(0,s.default)("__p")},f));var b=void 0;return"string"!==l&&"number"!==l&&"bool"!==l||(b=c.default.createElement(h.default,u({type:l,name:t},o))),c.default.createElement("li",{className:(0,s.default)("__list-item")+" "+(0,s.default)("__prop-list-item")},c.default.createElement("h3",{className:(0,s.default)("__prop-heading")},c.default.createElement(y.default,{anchorId:"prop-"+(0,p.default)(t)}),c.default.createElement("code",{className:(0,s.default)("__prop-name")},t),d,_),v,b)};b.propTypes={name:i.default.string.isRequired,defs:i.default.shape({type:i.default.string.isRequired,required:i.default.bool,defaultValue:i.default.node,description:i.default.string}).isRequired,restProps:i.default.object},t.default=b},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),u=r(a),o=n(2),c=r(o),l=n(1),i=r(l),f=n(14),s=r(f),d=n(6),p=r(d),_=n(5),h=r(_),v=n(3),y=r(v),b=function(e){var t=e.state,n=e.setProp,r=e.props;return!!r&!!t&&u.default.createElement("section",{className:(0,i.default)("__section")+" "+(0,i.default)("__section--slim")},u.default.createElement("h2",{className:(0,i.default)("__heading")},u.default.createElement(y.default,{anchorId:"props"}),"Props"),u.default.createElement("ul",{className:(0,i.default)("__list")+" "+(0,i.default)("__prop-list")},(0,h.default)(Object.keys(r)).map(function(e){return u.default.createElement(s.default,{key:e,name:e,defs:r[e],value:(0,p.default)(t[e],r[e].type),onChange:n})})))||null};b.propTypes={setProp:c.default.func.isRequired,state:c.default.object,props:c.default.object},t.default=b},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),u=r(a),o=n(2),c=r(o),l=n(1),i=r(l),f=n(18),s=r(f),d=function(e){var t=e.status;return!!t&&u.default.createElement("span",{className:(0,i.default)("__status")+" "+(0,i.default)("__status--"+s.default[t].className)},s.default[t].text)||null};d.propTypes={status:c.default.oneOf(["DANGEROUS","WIP","READY"])},t.default=d},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),u=r(a),o=n(2),c=r(o),l=n(1),i=r(l),f=function(e){var t=e.swatch,n=e.isActive,r=e.onClick,a=function(){return r(t)},o=n?(0,i.default)("__swatch-button-active"):null;return u.default.createElement("button",{className:(0,i.default)("__swatch-button")+" "+o,style:{background:t,color:t},onClick:a})};f.propTypes={onClick:c.default.func.isRequired,swatch:c.default.string,isActive:c.default.bool},t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={DANGEROUS:{text:"Dangerous",className:"dangerous"},WIP:{text:"Work in progress",className:"wip"},READY:{text:"Ready",className:"ready"}}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.merge=void 0;var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(8);Object.defineProperty(t,"merge",{enumerable:!0,get:function(){return r(f).default}});var s=n(0),d=r(s),p=n(7),_=r(p),h=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(t){return function(n){function r(t){u(this,r);var n=o(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,t));return n.state={},n.extendedExamples=Object.assign(e.examples||{},{Default:l({},n.props)}),n.setExample=n.setExample.bind(n),n.setProp=n.setProp.bind(n),n}return c(r,n),i(r,[{key:"setExample",value:function(e){this.setState(l({},this.extendedExamples[e]))}},{key:"setProp",value:function(e,t){this.setState(a({},e,t))}},{key:"render",value:function(){var n=Object.assign({},this.props,this.state);return d.default.createElement(_.default,l({setExample:this.setExample,setProp:this.setProp,componentProps:n},e),d.default.createElement(t,n))}}]),r}(s.Component)}};t.default=h},function(e,t,n){(function(e,n){function r(e,t){return e.set(t[0],t[1]),e}function a(e,t){return e.add(t),e}function u(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function o(e,t){for(var n=-1,r=e?e.length:0;++n<r&&!1!==t(e[n],n,e););return e}function c(e,t){for(var n=-1,r=t.length,a=e.length;++n<r;)e[a+n]=t[n];return e}function l(e,t,n,r){var a=-1,u=e?e.length:0;for(r&&u&&(n=e[++a]);++a<u;)n=t(n,e[a],a,e);return n}function i(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function f(e,t){return null==e?void 0:e[t]}function s(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}function d(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function p(e,t){return function(n){return e(t(n))}}function _(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}function h(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function v(){this.__data__=Xt?Xt(null):{}}function y(e){return this.has(e)&&delete this.__data__[e]}function b(e){var t=this.__data__;if(Xt){var n=t[e];return n===Fe?void 0:n}return Rt.call(t,e)?t[e]:void 0}function m(e){var t=this.__data__;return Xt?void 0!==t[e]:Rt.call(t,e)}function g(e,t){return this.__data__[e]=Xt&&void 0===t?Fe:t,this}function j(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function O(){this.__data__=[]}function w(e){var t=this.__data__,n=W(t,e);return!(n<0)&&(n==t.length-1?t.pop():zt.call(t,n,1),!0)}function E(e){var t=this.__data__,n=W(t,e);return n<0?void 0:t[n][1]}function P(e){return W(this.__data__,e)>-1}function x(e,t){var n=this.__data__,r=W(n,e);return r<0?n.push([e,t]):n[r][1]=t,this}function N(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function M(){this.__data__={hash:new h,map:new(Jt||j),string:new h}}function k(e){return pe(this,e).delete(e)}function A(e){return pe(this,e).get(e)}function C(e){return pe(this,e).has(e)}function S(e,t){return pe(this,e).set(e,t),this}function R(e){this.__data__=new j(e)}function q(){this.__data__=new j}function T(e){return this.__data__.delete(e)}function I(e){return this.__data__.get(e)}function D(e){return this.__data__.has(e)}function U(e,t){var n=this.__data__;if(n instanceof j){var r=n.__data__;if(!Jt||r.length<$e-1)return r.push([e,t]),this;n=this.__data__=new N(r)}return n.set(e,t),this}function $(e,t){var n=fn(e)||xe(e)?i(e.length,String):[],r=n.length,a=!!r;for(var u in e)!t&&!Rt.call(e,u)||a&&("length"==u||be(u,r))||n.push(u);return n}function F(e,t,n){(void 0===n||Pe(e[t],n))&&("number"!=typeof t||void 0!==n||t in e)||(e[t]=n)}function B(e,t,n){var r=e[t];Rt.call(e,t)&&Pe(r,n)&&(void 0!==n||t in e)||(e[t]=n)}function W(e,t){for(var n=e.length;n--;)if(Pe(e[n][0],t))return n;return-1}function z(e,t){return e&&fe(t,Te(t),e)}function V(e,t,n,r,a,u,c){var l;if(r&&(l=u?r(e,a,u,c):r(e)),void 0!==l)return l;if(!Ce(e))return e;var i=fn(e);if(i){if(l=he(e),!t)return ie(e,l)}else{var f=ln(e),d=f==Ge||f==He;if(sn(e))return te(e,t);if(f==Je||f==We||d&&!u){if(s(e))return u?e:{};if(l=ve(d?{}:e),!t)return se(e,z(l,e))}else{if(!yt[f])return u?e:{};l=ye(e,f,V,t)}}c||(c=new R);var p=c.get(e);if(p)return p;if(c.set(e,l),!i)var _=n?de(e):Te(e);return o(_||e,function(a,u){_&&(u=a,a=e[u]),B(l,u,V(a,t,n,r,u,e,c))}),l}function G(e){return Ce(e)?Bt(e):{}}function H(e,t,n){var r=t(e);return fn(e)?r:c(r,n(e))}function L(e){return Tt.call(e)}function Y(e){return!(!Ce(e)||je(e))&&(ke(e)||s(e)?It:_t).test(Ee(e))}function J(e){return Se(e)&&Ae(e.length)&&!!vt[Tt.call(e)]}function Z(e){if(!Oe(e))return Ht(e);var t=[];for(var n in Object(e))Rt.call(e,n)&&"constructor"!=n&&t.push(n);return t}function K(e){if(!Ce(e))return we(e);var t=Oe(e),n=[];for(var r in e)("constructor"!=r||!t&&Rt.call(e,r))&&n.push(r);return n}function Q(e,t,n,r,a){if(e!==t){if(!fn(t)&&!dn(t))var u=K(t);o(u||t,function(o,c){if(u&&(c=o,o=t[c]),Ce(o))a||(a=new R),X(e,t,c,n,Q,r,a);else{var l=r?r(e[c],o,c+"",e,t,a):void 0;void 0===l&&(l=o),F(e,c,l)}})}}function X(e,t,n,r,a,u,o){var c=e[n],l=t[n],i=o.get(l);if(i)return void F(e,n,i);var f=u?u(c,l,n+"",e,t,o):void 0,s=void 0===f;s&&(f=l,fn(l)||dn(l)?fn(c)?f=c:Me(c)?f=ie(c):(s=!1,f=V(l,!0)):Re(l)||xe(l)?xe(c)?f=qe(c):!Ce(c)||r&&ke(c)?(s=!1,f=V(l,!0)):f=c:s=!1),s&&(o.set(l,f),a(f,l,r,u,o),o.delete(l)),F(e,n,f)}function ee(e,t){return t=Lt(void 0===t?e.length-1:t,0),function(){for(var n=arguments,r=-1,a=Lt(n.length-t,0),o=Array(a);++r<a;)o[r]=n[t+r];r=-1;for(var c=Array(t+1);++r<t;)c[r]=n[r];return c[t]=o,u(e,this,c)}}function te(e,t){if(t)return e.slice();var n=new e.constructor(e.length);return e.copy(n),n}function ne(e){var t=new e.constructor(e.byteLength);return new $t(t).set(new $t(e)),t}function re(e,t){var n=t?ne(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}function ae(e,t,n){return l(t?n(d(e),!0):d(e),r,new e.constructor)}function ue(e){var t=new e.constructor(e.source,pt.exec(e));return t.lastIndex=e.lastIndex,t}function oe(e,t,n){return l(t?n(_(e),!0):_(e),a,new e.constructor)}function ce(e){return on?Object(on.call(e)):{}}function le(e,t){var n=t?ne(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function ie(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}function fe(e,t,n,r){n||(n={});for(var a=-1,u=t.length;++a<u;){var o=t[a],c=r?r(n[o],e[o],o,n,e):void 0;B(n,o,void 0===c?e[o]:c)}return n}function se(e,t){return fe(e,cn(e),t)}function de(e){return H(e,Te,cn)}function pe(e,t){var n=e.__data__;return ge(t)?n["string"==typeof t?"string":"hash"]:n.map}function _e(e,t){var n=f(e,t);return Y(n)?n:void 0}function he(e){var t=e.length,n=e.constructor(t);return t&&"string"==typeof e[0]&&Rt.call(e,"index")&&(n.index=e.index,n.input=e.input),n}function ve(e){return"function"!=typeof e.constructor||Oe(e)?{}:G(Ft(e))}function ye(e,t,n,r){var a=e.constructor;switch(t){case tt:return ne(e);case ze:case Ve:return new a(+e);case nt:return re(e,r);case rt:case at:case ut:case ot:case ct:case lt:case it:case ft:case st:return le(e,r);case Le:return ae(e,r,n);case Ye:case Qe:return new a(e);case Ze:return ue(e);case Ke:return oe(e,r,n);case Xe:return ce(e)}}function be(e,t){return!!(t=null==t?Be:t)&&("number"==typeof e||ht.test(e))&&e>-1&&e%1==0&&e<t}function me(e,t,n){if(!Ce(n))return!1;var r=typeof t;return!!("number"==r?Ne(n)&&be(t,n.length):"string"==r&&t in n)&&Pe(n[t],e)}function ge(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}function je(e){return!!Ct&&Ct in e}function Oe(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||kt)}function we(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}function Ee(e){if(null!=e){try{return St.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Pe(e,t){return e===t||e!==e&&t!==t}function xe(e){return Me(e)&&Rt.call(e,"callee")&&(!Wt.call(e,"callee")||Tt.call(e)==We)}function Ne(e){return null!=e&&Ae(e.length)&&!ke(e)}function Me(e){return Se(e)&&Ne(e)}function ke(e){var t=Ce(e)?Tt.call(e):"";return t==Ge||t==He}function Ae(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=Be}function Ce(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function Se(e){return!!e&&"object"==typeof e}function Re(e){if(!Se(e)||Tt.call(e)!=Je||s(e))return!1;var t=Ft(e);if(null===t)return!0;var n=Rt.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&St.call(n)==qt}function qe(e){return fe(e,Ie(e))}function Te(e){return Ne(e)?$(e):Z(e)}function Ie(e){return Ne(e)?$(e,!0):K(e)}function De(){return[]}function Ue(){return!1}var $e=200,Fe="__lodash_hash_undefined__",Be=9007199254740991,We="[object Arguments]",ze="[object Boolean]",Ve="[object Date]",Ge="[object Function]",He="[object GeneratorFunction]",Le="[object Map]",Ye="[object Number]",Je="[object Object]",Ze="[object RegExp]",Ke="[object Set]",Qe="[object String]",Xe="[object Symbol]",et="[object WeakMap]",tt="[object ArrayBuffer]",nt="[object DataView]",rt="[object Float32Array]",at="[object Float64Array]",ut="[object Int8Array]",ot="[object Int16Array]",ct="[object Int32Array]",lt="[object Uint8Array]",it="[object Uint8ClampedArray]",ft="[object Uint16Array]",st="[object Uint32Array]",dt=/[\\^$.*+?()[\]{}|]/g,pt=/\w*$/,_t=/^\[object .+?Constructor\]$/,ht=/^(?:0|[1-9]\d*)$/,vt={};vt[rt]=vt[at]=vt[ut]=vt[ot]=vt[ct]=vt[lt]=vt[it]=vt[ft]=vt[st]=!0,vt[We]=vt["[object Array]"]=vt[tt]=vt[ze]=vt[nt]=vt[Ve]=vt["[object Error]"]=vt[Ge]=vt[Le]=vt[Ye]=vt[Je]=vt[Ze]=vt[Ke]=vt[Qe]=vt[et]=!1;var yt={};yt[We]=yt["[object Array]"]=yt[tt]=yt[nt]=yt[ze]=yt[Ve]=yt[rt]=yt[at]=yt[ut]=yt[ot]=yt[ct]=yt[Le]=yt[Ye]=yt[Je]=yt[Ze]=yt[Ke]=yt[Qe]=yt[Xe]=yt[lt]=yt[it]=yt[ft]=yt[st]=!0,yt["[object Error]"]=yt[Ge]=yt[et]=!1;var bt="object"==typeof e&&e&&e.Object===Object&&e,mt="object"==typeof self&&self&&self.Object===Object&&self,gt=bt||mt||Function("return this")(),jt="object"==typeof t&&t&&!t.nodeType&&t,Ot=jt&&"object"==typeof n&&n&&!n.nodeType&&n,wt=Ot&&Ot.exports===jt,Et=wt&&bt.process,Pt=function(){try{return Et&&Et.binding("util")}catch(e){}}(),xt=Pt&&Pt.isTypedArray,Nt=Array.prototype,Mt=Function.prototype,kt=Object.prototype,At=gt["__core-js_shared__"],Ct=function(){var e=/[^.]+$/.exec(At&&At.keys&&At.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),St=Mt.toString,Rt=kt.hasOwnProperty,qt=St.call(Object),Tt=kt.toString,It=RegExp("^"+St.call(Rt).replace(dt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Dt=wt?gt.Buffer:void 0,Ut=gt.Symbol,$t=gt.Uint8Array,Ft=p(Object.getPrototypeOf,Object),Bt=Object.create,Wt=kt.propertyIsEnumerable,zt=Nt.splice,Vt=Object.getOwnPropertySymbols,Gt=Dt?Dt.isBuffer:void 0,Ht=p(Object.keys,Object),Lt=Math.max,Yt=_e(gt,"DataView"),Jt=_e(gt,"Map"),Zt=_e(gt,"Promise"),Kt=_e(gt,"Set"),Qt=_e(gt,"WeakMap"),Xt=_e(Object,"create"),en=Ee(Yt),tn=Ee(Jt),nn=Ee(Zt),rn=Ee(Kt),an=Ee(Qt),un=Ut?Ut.prototype:void 0,on=un?un.valueOf:void 0;h.prototype.clear=v,h.prototype.delete=y,h.prototype.get=b,h.prototype.has=m,h.prototype.set=g,j.prototype.clear=O,j.prototype.delete=w,j.prototype.get=E,j.prototype.has=P,j.prototype.set=x,N.prototype.clear=M,N.prototype.delete=k,N.prototype.get=A,N.prototype.has=C,N.prototype.set=S,R.prototype.clear=q,R.prototype.delete=T,R.prototype.get=I,R.prototype.has=D,R.prototype.set=U;var cn=Vt?p(Vt,Object):De,ln=L;(Yt&&ln(new Yt(new ArrayBuffer(1)))!=nt||Jt&&ln(new Jt)!=Le||Zt&&"[object Promise]"!=ln(Zt.resolve())||Kt&&ln(new Kt)!=Ke||Qt&&ln(new Qt)!=et)&&(ln=function(e){var t=Tt.call(e),n=t==Je?e.constructor:void 0,r=n?Ee(n):void 0;if(r)switch(r){case en:return nt;case tn:return Le;case nn:return"[object Promise]";case rn:return Ke;case an:return et}return t});var fn=Array.isArray,sn=Gt||Ue,dn=xt?function(e){return function(t){return e(t)}}(xt):J,pn=function(e){return ee(function(t,n){var r=-1,a=n.length,u=a>1?n[a-1]:void 0,o=a>2?n[2]:void 0;for(u=e.length>3&&"function"==typeof u?(a--,u):void 0,o&&me(n[0],n[1],o)&&(u=a<3?void 0:u,a=1),t=Object(t);++r<a;){var c=n[r];c&&e(t,c,r,u)}return t})}(function(e,t,n){Q(e,t,n)});n.exports=pn}).call(t,n(21),n(22)(e))},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,